plugins {
	id 'nu.studer.rocker' version '3.0.2'					// https://github.com/etiennestuder/gradle-rocker-plugin
	id 'com.github.johnrengelman.shadow' version '6.1.0'	// http://imperceptiblethoughts.com/shadow/#
}

apply plugin: 'java'
sourceCompatibility = 11
targetCompatibility = 11

apply plugin: 'com.diffplug.spotless'
spotless {
	ratchetFrom 'origin/staging'
	java {
		target 'src/main/java/**/*.java', 'src/test/java/**/*.java'
		licenseHeaderFile rootProject.file('gradle/spotless-license-agpl.java')
		importOrder()
		eclipse().configFile(rootProject.file('gradle/spotless.eclipseformat.xml'))
		removeUnusedImports()
		// see common.IpGetter
		custom 'useIpGetter', {
			if (it.contains('req.ip()') && !it.contains('abstract class Ip {')) {
				throw new AssertionError('Use IpGetter instead of Request.ip()')
			}
		}
	}
}

////////////////
// flywayJooq //
////////////////
apply plugin: 'org.mytake.gradle.flywayjooq'
flywayJooq {
	setup.dockerComposeFile = file('src/test/resources/docker-compose.yml')
	setup.dockerConnectionParams = file('build/pgConnection.properties')
	setup.flywayMigrations = file('src/main/resources/db/migration')
	setup.flywaySchemaDump = file('build/schema.sql')

	generator {
		database.inputSchema = 'public'
		generate.pojos = false
		generate.fluentSetters = true
		generate.javaTimeTypes = true
		target.packageName = 'db'
		target.directory = 'src/main/jooq-generated'
	}
	// https://www.jooq.org/doc/latest/manual/code-generation/custom-data-type-bindings/
	forcedType {
		userType = 'java.lang.String'
		binding = 'db.bindings.PostgresInetBinding'
		includeExpression = '.*'
		includeTypes = 'inet'
	}
}
// because docker-compose can't start postgres on Heroku
if (buildsrc.Env.isHeroku()) {
	tasks.named('jooq') {
		enabled = false
	}
}

sourceSets.main.java {
	srcDir 'src/main/jooq-generated'
	srcDir 'src/main/rocker'
	srcDir 'src/main/jsoniter-generated'
}

////////////
// rocker //
////////////
String rockerVersion = '1.3.0'
rocker {
	version = rockerVersion
	configurations {
		main {
			// if these change, also change DevHotReload
			optimize = buildsrc.Env.isHerokuOrCI()
			templateDir = file('src/main/rocker')
			outputDir = file('src/main/rocker-generated')
			extendsModelClass = 'common.CustomRockerModel'
			extendsClass = 'common.CustomRockerTemplate'
		}
	}
}

// enforce tab indentation on rocker files
spotless {
	ratchetFrom 'origin/staging'
	format 'rocker', {
		target 'src/main/rocker/**/*.rocker.html'
		trimTrailingWhitespace()
		endWithNewline()
		licenseHeaderFile rootProject.file('gradle/spotless-license-agpl.rocker'), '@args|@import'
		indentWithTabs(2)
		// indentWithTabs screws up the license header, so we have to fix it with these regexes
		replaceRegex 'fix license-header dots 1', '^\\* ', ' * '
		replaceRegex 'fix license-header dots 2', '^\\*\n', ' *\n'
		replace      'fix license-header dots 3', 'team@mytake.org\n*@', 'team@mytake.org\n *@'
	}
}

//////////////////
// normal stuff //
//////////////////
tasks.named('eclipse') {
	dependsOn 'cleanEclipse', 'jooq', 'compileRocker'
}

dependencies {
	String JOOBY_VER = '1.6.9'
	// jooby
	implementation "org.jooby:jooby-netty:$JOOBY_VER"
	implementation "org.jooby:jooby-rocker:$JOOBY_VER"
	implementation "org.jooby:jooby-jooq:$JOOBY_VER"
	implementation "org.jooby:jooby-commons-email:$JOOBY_VER"
	implementation "org.jooby:jooby-assets:$JOOBY_VER"
	implementation "org.jooby:jooby-quartz:$JOOBY_VER"
	testImplementation "org.jooby:jooby-whoops:$JOOBY_VER"

	// workaround to get Java 11 guice, Jooby 2 probably fixes
	implementation 'com.google.inject:guice:5.0.1'
	// fixes heroku-only problem: ClassNotFoundException: javax.annotation.PostConstruct
	implementation 'javax.annotation:javax.annotation-api:1.3.2'
	// avoid javax.annotations JPMS hell
	implementation 'org.jetbrains:annotations:23.0.0'

	// json
	implementation "com.jsoniter:jsoniter:$VER_JSONITER"
	implementation project(':client')
	implementation project(':client-interface')
	implementation project(':lucene')

	// jooq (version is set by jooq DSL)
	implementation 'org.jooq:jooq'
	// db connector for postgres and h2
	implementation "org.postgresql:postgresql:${VER_POSTGRESQL_DRIVER}"
	// flyway
	implementation "org.flywaydb:flyway-core:${VER_FLYWAY}"
	// fetch headers from node.mytake.org
	implementation "com.squareup.okhttp3:okhttp:${VER_OKHTTP}"
	// common libs
	implementation 'commons-validator:commons-validator:1.7'
	implementation 'com.diffplug.durian:durian-core:1.2.0'
	implementation 'com.diffplug.durian:durian-collect:1.2.0'
	implementation 'commons-codec:commons-codec:1.15'

	// code quality annotations, especially @Nullable
	annotationProcessor 'com.google.errorprone:error_prone_annotations:2.6.0'

	testImplementation "junit:junit:$VER_JUNIT"
	testImplementation "org.assertj:assertj-core:$VER_ASSERTJ"
	testImplementation 'io.rest-assured:rest-assured:4.3.3'
	testImplementation 'com.icegreen:greenmail:1.5.7'									// http://www.icegreen.com/greenmail/
	testImplementation "com.palantir.docker.compose:docker-compose-rule-core:$VER_PALANTIR_DOCKER_COMPOSE"		// https://github.com/palantir/docker-compose-rule
	testImplementation "com.palantir.docker.compose:docker-compose-rule-junit4:$VER_PALANTIR_DOCKER_COMPOSE"	// https://github.com/palantir/docker-compose-rule

	testImplementation "com.fizzed:rocker-compiler:${rockerVersion}"	// required for hotreload
	testImplementation "org.eclipse.jgit:org.eclipse.jgit:${VER_JGIT}"	// required for serving local repo

	// dep for auth (3.15.0 breaks docker-compose 1.5.0)
	implementation 'com.auth0:java-jwt:3.11.0'
}

// renders the socialEmbed template to disk for node
tasks.register('renderSocialTemplate', JavaExec) {
	dependsOn 'testClasses'
	classpath = sourceSets.test.runtimeClasspath
	main = 'common.SocialEmbedTest'
	args = [
		file('../node/build/dist-client/socialEmbed.html').absolutePath
	]
}

// see common.DevHotReload in an IDE for faster dev
tasks.register('runDev', JavaExec) {
	dependsOn 'testClasses', ':lucene:assemble'
	description = 'Run app in dev mode'
	classpath = sourceSets.test.runtimeClasspath
	main = 'common.DevHotReload'
	args = [
		'dev',
		'gradle'
	]
}

tasks.register('updateSnapshot', Test) {
	systemProperties(['SET_SNAPSHOTS': 'TRUE'])
}
tasks.named('test') {
	flywayJooq.neededBy(it)
	dependsOn ':node:assemble', ':lucene:assemble'
}

/////////////
// fat jar //
/////////////
shadowJar {}
