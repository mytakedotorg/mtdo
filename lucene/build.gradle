apply plugin: 'java'

String VER_LUCENE = '9.0.0'
dependencies {
	implementation project(':client-interface')
	implementation 'com.diffplug.durian:durian-core:1.2.0'
	implementation 'com.diffplug.durian:durian-collect:1.2.0'
	implementation 'com.diffplug.durian:durian-io:1.2.0'
	implementation "org.apache.lucene:lucene-core:${VER_LUCENE}"
	implementation "org.apache.lucene:lucene-queryparser:${VER_LUCENE}"
	implementation "org.apache.lucene:lucene-analysis-common:${VER_LUCENE}"
	testImplementation project(':factset-tooling')
	testImplementation "com.squareup.okhttp3:okhttp:${VER_OKHTTP}"
	testImplementation "com.google.code.gson:gson:${VER_GSON}"
	testImplementation "junit:junit:${VER_JUNIT}"
	testImplementation "org.assertj:assertj-core:${VER_ASSERTJ}"
}

apply plugin: 'com.diffplug.spotless'
spotless {
	ratchetFrom 'origin/staging'
	java {
		licenseHeaderFile rootProject.file('gradle/spotless-license-agpl.java')
		importOrder()
		eclipse().configFile(rootProject.file('gradle/spotless.eclipseformat.xml'))
		removeUnusedImports()
	}
}

// spotless:off
def repoToSha = [
	'us-presidential-debates', 'cc20c1b17f8cc70f894139514512924044f2f3bf'
]
def searchIndex = file('build/search-index')
tasks.register('indexGenerate', JavaExec) {
	classpath = sourceSets.test.runtimeClasspath
	main = 'org.mytake.factset.search.GenerateIndex'
	args = [searchIndex.absolutePath] + repoToSha

	dependsOn 'testClasses'
	inputs.property('repoToSha', args)
	inputs.files(sourceSets.test.runtimeClasspath).withPathSensitivity(PathSensitivity.NONE)

	outputs.dir(searchIndex)
	outputs.cacheIf { true }
}
// spotless:on

tasks.register('indexHash', org.mytake.gradle.hash.HashTask) {
	dependsOn 'indexGenerate'
	addFolder 'src/main/java/org/mytake/lucene'
	addStrings repoToSha
	destination 'build/search-index-hash.json', '../client/src/main/scripts/components/search/search-index.json'
}

tasks.named('assemble') {
	dependsOn('indexHash')
}
